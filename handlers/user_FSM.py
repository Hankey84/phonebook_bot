from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.formatting import (
    as_list,
    as_marked_section,
    Bold,
)  # Italic, as_numbered_list –∏ —Ç–¥
import re

# from filters.chat_types import ChatTypeFilter, IsAdmin
from kbds.reply import get_keyboard


user_FSM_router = Router()
# user_FSM_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


FSM_KB = get_keyboard(
    "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä",
    "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä",
    "–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä",
    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä üì±",
    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è",
    "–Ø –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—à–µ–ª",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    request_contact=3,
    request_location=4,
    sizes=(3, 2, 1),
)

@user_FSM_router.message(CommandStart()) # –õ–æ–≤–∏–º —Ö–µ–Ω–¥–ª–µ—Ä /start
async def abonent_features(message: types.Message):
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=FSM_KB)


@user_FSM_router.message(F.text.lower() == "–ø–æ–º–æ—â—å")
@user_FSM_router.message(Command("help"))
async def help_cmd(message: types.Message, state: FSMContext):
    text = as_list(
        as_marked_section(
            Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞—â–µ–Ω–∏—è:"),
            "—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã /",
            "—á–µ—Ä–µ–∑ –º–µ–Ω—é",
            "—á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏",
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("–í —á–∞—Ç–µ –Ω–µ–ª—å–∑—è:"),
            "–Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è",
            "—Ç—ã–∫–∞—Ç—å –∫—É–¥–∞-–ø–æ–ø–∞–ª–æ",
            marker="‚ùå "
        ),
        sep="\n-------------------------\n",
    )
    current_state = await state.get_state()

    if current_state is None: # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ FSM —Ç–æ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç 
        await message.answer(text.as_html())
        await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–∂–º–∏—Ç–µ /start")
    else: # –ò–Ω–∞—á–µ - –¥—Ä—É–≥–æ–π
        await message.answer("–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ \"–æ—Ç–º–µ–Ω–∞\"\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ - \"–Ω–∞–∑–∞–¥\"")

@user_FSM_router.message(F.text == "–Ø –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—à–µ–ª")
async def starting_at_phonebook(message: types.Message):
    await message.answer("–û–ö, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤:")

@user_FSM_router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä")
async def change_number(message: types.Message):
    await message.answer("–û–ö, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤")

@user_FSM_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä")
async def delete_number(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä(–∞) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

@user_FSM_router.message(F.contact)
async def get_contact(message: types.Message):
    await message.answer(f"–Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω")
    await message.answer(str(message.contact))

@user_FSM_router.message(F.location)
async def get_location(message: types.Message):
    await message.answer(f"–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer(str(message.location))


#–ö–æ–¥ –Ω–∏–∂–µ –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM)

class AddPhonebook(StatesGroup):
    #–®–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    surname = State()
    firstname = State()
    patronymic = State()
    phonenumber = State()
    description = State()

    texts = {
        'AddPhonebook:surname': '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∑–∞–Ω–æ–≤–æ:',
        'AddPhonebook:firstname': '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–Ω–æ–≤–æ:',
        'AddPhonebook:patronymic': '–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ:',
        'AddPhonebook:phonenumber': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–Ω–æ–≤–æ:',
        'AddPhonebook:description': '–≠—Ç–æ—Ç —Å—Ç–µ–π—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É...',
    }

#–°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≤–≤–æ–¥–∞ surname
@user_FSM_router.message(StateFilter(None), F.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä")
async def add_abonent(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–±–æ–Ω–µ–Ω—Ç–∞", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AddPhonebook.surname)

 
#–•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ —Ö–¥–µ—Å—å,
#–ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—Ç–∞–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–º–µ—Ä 1 (—ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∞—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤)
@user_FSM_router.message(StateFilter('*'), Command("–æ—Ç–º–µ–Ω–∞"))
@user_FSM_router.message(StateFilter('*'), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:

    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=FSM_KB)

#–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–Ω–∞ –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@user_FSM_router.message(StateFilter('*'), Command("–Ω–∞–∑–∞–¥"))
@user_FSM_router.message(StateFilter('*'), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_step_handler(message: types.Message, state: FSMContext) -> None:

    current_state = await state.get_state()

    if current_state == AddPhonebook.surname:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        return

    previous = None
    for step in AddPhonebook.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n {AddPhonebook.texts[previous.state]}")
            return
        previous = step


#–õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ surname –∏ –≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ firstname
@user_FSM_router.message(AddPhonebook.surname, F.text)
async def add_surname(message: types.Message, state: FSMContext):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫—É—é –ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    #–∏ –≤—ã–π—Ç–∏ –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –Ω–µ –º–µ–Ω—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    #–Ω–∞–ø—Ä–∏–º–µ—Ä:
    if len(message.text) >= 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤. \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    
    await state.update_data(surname=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è")
    await state.set_state(AddPhonebook.firstname) # –ü–µ—Ä–µ–≤–æ–¥–∏–º FSM –Ω–∞ 2 —Å—Ç–∞–¥–∏—é

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è surname
@user_FSM_router.message(AddPhonebook.surname)
async def add_surname2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")


#–õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ firstname –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ patronymic
@user_FSM_router.message(AddPhonebook.firstname, F.text)
async def add_firstname(message: types.Message, state: FSMContext):
    if len(message.text) >= 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤. \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    await state.update_data(firstname=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ")
    await state.set_state(AddPhonebook.patronymic) # –ü–µ—Ä–µ–≤–æ–¥–∏–º FSM –Ω–∞ 3 —Å—Ç–∞–¥–∏—é

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è firstname
@user_FSM_router.message(AddPhonebook.firstname)
async def add_firstname2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")


#–õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ patronymic –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ phonenumber
@user_FSM_router.message(AddPhonebook.patronymic, F.text)
async def add_patronymic(message: types.Message, state: FSMContext):
    if len(message.text) >= 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Å—Ç–≤–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤. \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    
    await state.update_data(patronymic=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await state.set_state(AddPhonebook.phonenumber) # –ü–µ—Ä–µ–≤–æ–¥–∏–º FSM –Ω–∞ 4 —Å—Ç–∞–¥–∏—é

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è patronymic
@user_FSM_router.message(AddPhonebook.patronymic)
async def add_patronymic2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")


#–õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ phonenumber –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ description
@user_FSM_router.message(AddPhonebook.phonenumber, F.text)
async def add_phonenumber(message: types.Message, state: FSMContext):
    try:
        phone_pattern = re.compile(r"^((8|\+?)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$")
        # int(message.text)
        if not phone_pattern.match(message.text):
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
    
    await state.update_data(phonenumber=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–±–æ–Ω–µ–Ω—Ç–∞")
    await state.set_state(AddPhonebook.description) # –ü–µ—Ä–µ–≤–æ–¥–∏–º FSM –Ω–∞ 5 —Å—Ç–∞–¥–∏—é

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è phonenumber
@user_FSM_router.message(AddPhonebook.phonenumber)
async def add_phonenumber2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


#–õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ description –∏ –ø–æ—Ç–æ–º –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@user_FSM_router.message(AddPhonebook.description, F.text)
async def add_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–ê–±–æ–Ω–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=FSM_KB)
    data = await state.get_data()
    await message.answer(str(data)) # –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ –∞–±–æ–Ω–µ–Ω—Ç–∞
    await state.clear()

@user_FSM_router.message(AddPhonebook.description)
async def add_description2(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
