from aiogram import F, Router, types
# from asyncio import sleep
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.formatting import (
    as_list,
    as_marked_section,
    Bold,
)  # Italic, as_numbered_list –∏ —Ç–¥
import re

# from filters.chat_types import ChatTypeFilter, IsAdmin
from kbds.reply import get_keyboard
from file.engine import save_number, search_records, show_numbers

user_FSM_router = Router()
# user_FSM_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä(–º–æ–¥—É–ª—å kbd.reply)
FSM_KB = get_keyboard(
    "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä",
    "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä",
    "–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä",
    "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
    "–ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å",
    "–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä üì±",
    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è",
    
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    request_contact=5,
    request_location=6,
    sizes=(3, 2, 2),
)

@user_FSM_router.message(CommandStart()) # –õ–æ–≤–∏–º —Ö–µ–Ω–¥–ª–µ—Ä /start
async def abonent_features(message: types.Message):
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=FSM_KB)

# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
@user_FSM_router.message(F.text.lower() == "–ø–æ–º–æ—â—å")
@user_FSM_router.message(Command("help"))
async def help_cmd(message: types.Message, state: FSMContext):
    text = as_list(
        as_marked_section(
            Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º:"),
            "—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã /",
            "—á–µ—Ä–µ–∑ –º–µ–Ω—é",
            "—á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏",
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("–í —á–∞—Ç–µ –Ω–µ–ª—å–∑—è:"),
            "–Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è",
            "—Ç—ã–∫–∞—Ç—å –∫—É–¥–∞-–ø–æ–ø–∞–ª–æ",
            marker="‚ùå "
        ),
        sep="\n-------------------------\n",
    )
    current_state = await state.get_state()

    if current_state is None: # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ FSM —Ç–æ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç 
        await message.answer(text.as_html())
        await message.answer("<b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–∂–º–∏—Ç–µ /start</b>")
    else: # –ò–Ω–∞—á–µ - –¥—Ä—É–≥–æ–π
        await message.answer("–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ <b>\"–æ—Ç–º–µ–Ω–∞\"</b>\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ - <b>\"–Ω–∞–∑–∞–¥\"</b>")

# –¢—É—Ç –º—ã –≤—ã–≤–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
@user_FSM_router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
async def starting_at_phonebook(message: types.Message):
    await message.answer("<b><u>–û–ö, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤:</u></b>")
    data = await show_numbers('phonebook.txt')
    for record in data:
        message_text = f"<b>–§–∞–º–∏–ª–∏—è:</b> {record['surname']}\n" \
                        f"<b>–ò–º—è:</b> {record['firstname']}\n" \
                        f"<b>–û—Ç—á–µ—Å—Ç–≤–æ:</b> {record['patronymic']}\n" \
                        f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {record['phonenumber']}\n" \
                        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {record['description']}"
        await message.answer(message_text)
        # await sleep(1)

@user_FSM_router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä")
async def change_number(message: types.Message):
    await message.answer("–û–ö, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤")

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@user_FSM_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä")
async def delete_number(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä(–∞) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

# –ü–æ–ª—É—á–∞–µ–º –∏–∑ –º–µ–Ω—é –≤ —Ö–µ–Ω–¥–ª–µ—Ä —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å
@user_FSM_router.message(F.contact)
async def get_contact(message: types.Message):
    await message.answer(f"<b>–Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω</b>")
    # await message.answer(str(message.contact)) # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç–∫—Ä–∞–Ω(–≤—Ä–µ–º–µ–Ω–Ω–æ)
    # –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –∏ –∫–ª–∞–¥–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
    contact = message.contact
    phone_number = contact.phone_number
    first_name = contact.first_name
    last_name = contact.last_name
    user_id = contact.user_id

    new_contact = {
        'surname': last_name or '',  # –ï—Å–ª–∏ —Ñ–∞–º–∏–ª–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        'firstname': first_name,
        'patronymic': '',  # –ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å –ø–æ–∑–∂–µ —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å...
        'phonenumber': phone_number,
        'description': f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}'
    }
    await save_number('phonebook.txt', new_contact) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –Ω–∞ —Ñ–∞–π–ª

@user_FSM_router.message(F.location)
async def get_location(message: types.Message):
    await message.answer(f"–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer(str(message.location))

class SearchState(StatesGroup):
    searching = State()

# –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é
@user_FSM_router.message(StateFilter(None), F.text == "–ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å")
async def search_number(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ (–§–ò–û, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞):", 
        reply_markup=types.ReplyKeyboardRemove()
        )
    await state.set_state(SearchState.searching)

#–õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ searching
@user_FSM_router.message(SearchState.searching, F.text)
async def get_search(message: types.Message, state: FSMContext):

    search_query = message.text # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏—â–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ
    print(type(search_query))
    search_results = await search_records('phonebook.txt', search_query)
    
    if search_results: # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for record in search_results:
            message_text = f"<b>–§–∞–º–∏–ª–∏—è:</b> {record['surname']}\n" \
                            f"<b>–ò–º—è:</b> {record['firstname']}\n" \
                            f"<b>–û—Ç—á–µ—Å—Ç–≤–æ:</b> {record['patronymic']}\n" \
                            f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {record['phonenumber']}\n" \
                            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {record['description']}"
        await message.answer(message_text, reply_markup=FSM_KB)
    else:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=FSM_KB)
    await state.clear()

#–ö–æ–¥ –Ω–∏–∂–µ –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞

class AddPhonebook(StatesGroup):
    #–®–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    surname = State()
    firstname = State()
    patronymic = State()
    phonenumber = State()
    description = State()

    texts = {
        'AddPhonebook:surname': '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∑–∞–Ω–æ–≤–æ:',
        'AddPhonebook:firstname': '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–Ω–æ–≤–æ:',
        'AddPhonebook:patronymic': '–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ:',
        'AddPhonebook:phonenumber': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–Ω–æ–≤–æ:',
        'AddPhonebook:description': '–≠—Ç–æ—Ç —Å—Ç–µ–π—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É...',
    }


#–°—Ç–∞–Ω–æ–≤–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≤–≤–æ–¥–∞ surname
@user_FSM_router.message(StateFilter(None), F.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä")
async def add_abonent(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–±–æ–Ω–µ–Ω—Ç–∞", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AddPhonebook.surname)

 
#–•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ —Ö–¥–µ—Å—å,
#–ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—Ç–∞–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–º–µ—Ä 1 (—ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∞—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤)
@user_FSM_router.message(StateFilter('*'), Command("–æ—Ç–º–µ–Ω–∞"))
@user_FSM_router.message(StateFilter('*'), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:

    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("<b>–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã</b>", reply_markup=FSM_KB)

#–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–Ω–∞ –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@user_FSM_router.message(StateFilter('*'), Command("–Ω–∞–∑–∞–¥"))
@user_FSM_router.message(StateFilter('*'), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_step_handler(message: types.Message, state: FSMContext) -> None:

    current_state = await state.get_state()

    if current_state == AddPhonebook.surname:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        return

    previous = None
    for step in AddPhonebook.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n {AddPhonebook.texts[previous.state]}")
            return
        previous = step


#–õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ surname –∏ –≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ firstname
@user_FSM_router.message(AddPhonebook.surname, F.text)
async def add_surname(message: types.Message, state: FSMContext):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫—É—é –ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    #–∏ –≤—ã–π—Ç–∏ –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –Ω–µ –º–µ–Ω—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    #–Ω–∞–ø—Ä–∏–º–µ—Ä:
    if len(message.text) >= 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤. \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    
    await state.update_data(surname=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è")
    await state.set_state(AddPhonebook.firstname) # –ü–µ—Ä–µ–≤–æ–¥–∏–º FSM –Ω–∞ 2 —Å—Ç–∞–¥–∏—é

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è surname
@user_FSM_router.message(AddPhonebook.surname)
async def add_surname2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")


#–õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ firstname –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ patronymic
@user_FSM_router.message(AddPhonebook.firstname, F.text)
async def add_firstname(message: types.Message, state: FSMContext):
    if len(message.text) >= 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤. \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    await state.update_data(firstname=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ")
    await state.set_state(AddPhonebook.patronymic) # –ü–µ—Ä–µ–≤–æ–¥–∏–º FSM –Ω–∞ 3 —Å—Ç–∞–¥–∏—é

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è firstname
@user_FSM_router.message(AddPhonebook.firstname)
async def add_firstname2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")


#–õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ patronymic –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ phonenumber
@user_FSM_router.message(AddPhonebook.patronymic, F.text)
async def add_patronymic(message: types.Message, state: FSMContext):
    if len(message.text) >= 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Å—Ç–≤–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤. \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    
    await state.update_data(patronymic=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await state.set_state(AddPhonebook.phonenumber) # –ü–µ—Ä–µ–≤–æ–¥–∏–º FSM –Ω–∞ 4 —Å—Ç–∞–¥–∏—é

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è patronymic
@user_FSM_router.message(AddPhonebook.patronymic)
async def add_patronymic2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")


#–õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ phonenumber –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ description
@user_FSM_router.message(AddPhonebook.phonenumber, F.text)
async def add_phonenumber(message: types.Message, state: FSMContext):
    try:
        phone_pattern = re.compile(r"^((8|\+?)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$")
        # int(message.text)
        if not phone_pattern.match(message.text):
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
    
    await state.update_data(phonenumber=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–±–æ–Ω–µ–Ω—Ç–∞")
    await state.set_state(AddPhonebook.description) # –ü–µ—Ä–µ–≤–æ–¥–∏–º FSM –Ω–∞ 5 —Å—Ç–∞–¥–∏—é

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è phonenumber
@user_FSM_router.message(AddPhonebook.phonenumber)
async def add_phonenumber2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


#–õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ description –∏ –ø–æ—Ç–æ–º –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@user_FSM_router.message(AddPhonebook.description, F.text)
async def add_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("<b>–ê–±–æ–Ω–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω</b>", reply_markup=FSM_KB)
    data = await state.get_data()
    # await message.answer(str(data)) # –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ –∞–±–æ–Ω–µ–Ω—Ç–∞
    await save_number('phonebook.txt', data)
    await state.clear()

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è descripton
@user_FSM_router.message(AddPhonebook.description)
async def add_description2(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
